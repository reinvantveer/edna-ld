doctype html
html
  head
    title= 'File schema graph'
    script(src='http://cytoscape.github.io/cytoscape.js/api/cytoscape.js-latest/cytoscape.min.js')
    link(rel='stylesheet', href='/stylesheets/style.css')
  body
    block content
      h1='File schema graph'
      p Look at all the pretty schemas!
      div(id="cy")
      script.
        const graphData = !{graph};

        const graph = {
          nodes: graphData.map(schema => {
            schema.id = schema.hash;
            return { data: schema };
          }),
          edges: graphData.map(schema => {
            return {
              data: {
                id: 'edge' + schema.hash,
                source: schema.hash,
                target: schema.closestRelatives[0].schemaHash
              }
            };
          })
        };

        const cy = cytoscape({
          container: document.getElementById('cy'),
          layout: {
            name: 'breadthfirst',

            fit: true, // whether to fit the viewport to the graph
            directed: false, // whether the tree is directed downwards (or edges can point in any direction if false)
            padding: 30, // padding on fit
            circle: true, // put depths in concentric circles if true, put depths top down if false
            spacingFactor: 1.75, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
            boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
            avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
            roots: undefined, // the roots of the trees
            maximalAdjustments: 0, // how many times to try to position the nodes in a maximal way (i.e. no backtracking)
            animate: false, // whether to transition the node positions
            animationDuration: 500, // duration of animation in ms if enabled
            animationEasing: undefined, // easing of animation if enabled
            ready: undefined, // callback on layoutready
            stop: undefined // callback on layoutstop
          },
          style: [
            {
              selector: 'node',
              style: {
                'label': 'data(hash)',
                'font-size': 8,
                'background-color': '#ea8a31'
              }
            },
            {
              selector: 'edge',
              style: {
                'curve-style': 'haystack',
                'haystack-radius': 0,
                'width': 3,
                'opacity': 0.666,
                'line-color': '#fcc694'
              }
            }
          ],
          elements: graph
        });

        const layout = cy.makeLayout({name: 'cose'});
        layout.run();